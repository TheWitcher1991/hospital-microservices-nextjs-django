# Generated by Django 5.1 on 2024-10-05 07:42

import django.contrib.auth.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import core.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Cabinet",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, verbose_name="Дата создания")),
                ("updated", models.DateTimeField(auto_now=True, verbose_name="Дата обновления")),
                ("name", models.CharField(max_length=256, verbose_name="Название")),
                ("number", models.CharField(max_length=10, verbose_name="Номер")),
            ],
            options={
                "verbose_name": "Кабинет",
                "verbose_name_plural": "Кабинеты",
            },
        ),
        migrations.CreateModel(
            name="PatientType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, verbose_name="Дата создания")),
                ("updated", models.DateTimeField(auto_now=True, verbose_name="Дата обновления")),
                ("name", models.CharField(max_length=256, verbose_name="Название")),
                ("sale", models.CharField(max_length=10, verbose_name="Скидка")),
            ],
            options={
                "verbose_name": "Тип пациента",
                "verbose_name_plural": "Типы пациентов",
            },
        ),
        migrations.CreateModel(
            name="Position",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, verbose_name="Дата создания")),
                ("updated", models.DateTimeField(auto_now=True, verbose_name="Дата обновления")),
                ("name", models.CharField(max_length=256, verbose_name="Название")),
                ("functions", models.TextField(verbose_name="Функции")),
                ("salary", models.DecimalField(decimal_places=0, max_digits=10, verbose_name="Зарплата")),
            ],
            options={
                "verbose_name": "Должность",
                "verbose_name_plural": "Должности",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("email", models.EmailField(max_length=256, unique=True, verbose_name="Email")),
                ("phone", models.CharField(blank=True, max_length=20, null=True, verbose_name="Телефон")),
                ("password", models.CharField(max_length=256, verbose_name="Пароль")),
                ("first_name", models.CharField(max_length=256, verbose_name="Имя")),
                ("last_name", models.CharField(max_length=256, verbose_name="Фамилия")),
                ("patronymic", models.CharField(max_length=256, verbose_name="Отчество")),
                ("age", models.CharField(blank=True, max_length=10, null=True, verbose_name="Возраст")),
                ("date", models.DateField(verbose_name="Дата рождения")),
                ("date_joined", models.DateTimeField(auto_now_add=True, verbose_name="Создан")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Обновлен")),
                ("is_active", models.BooleanField(default=True, verbose_name="Активность")),
                ("is_staff", models.BooleanField(default=False, verbose_name="Администратор")),
                ("is_online", models.BooleanField(default=False, verbose_name="Онлайн")),
                (
                    "role",
                    models.CharField(
                        choices=[("PATIENT", "Пациент"), ("EMPLOYEE", "Сотрудник"), ("GUEST", "Гость")],
                        default="PATIENT",
                        max_length=32,
                        verbose_name="Роль",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("MALE", "Мужской"), ("FEMALE", "Женский")], max_length=12, verbose_name="Пол"
                    ),
                ),
                ("last_ip", models.CharField(blank=True, max_length=255, null=True, verbose_name="Последний IP-адрес")),
                ("last_online", models.DateTimeField(blank=True, null=True, verbose_name="Последняя активность")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Пользователь",
                "verbose_name_plural": "Пользователи",
            },
            managers=[
                ("objects", core.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="ServiceType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, verbose_name="Дата создания")),
                ("updated", models.DateTimeField(auto_now=True, verbose_name="Дата обновления")),
                ("name", models.CharField(max_length=128, verbose_name="Название")),
                ("ico", models.CharField(blank=True, max_length=128, null=True, verbose_name="Иконка mdi-icons")),
            ],
            options={
                "verbose_name": "Специализация",
                "verbose_name_plural": "Специализации",
                "unique_together": {("name", "ico")},
            },
        ),
        migrations.CreateModel(
            name="Session",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, verbose_name="Дата создания")),
                ("updated", models.DateTimeField(auto_now=True, verbose_name="Дата обновления")),
                ("access_token", models.CharField(max_length=1024)),
                ("refresh_token", models.CharField(max_length=1024)),
                ("refresh_token_expires", models.DateTimeField(blank=True, null=True)),
                ("ip", models.CharField(max_length=255, verbose_name="IP-адрес")),
                ("user_agent", models.CharField(max_length=255, verbose_name="User-Agent")),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Сессия",
                "verbose_name_plural": "Сессии",
                "ordering": ["-created"],
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email", "phone"], name="core_user_email_96e900_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["first_name", "last_name", "patronymic"], name="core_user_first_n_4fd44d_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["date_joined", "updated_at"], name="core_user_date_jo_35ceef_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="user",
            unique_together={("email", "phone")},
        ),
        migrations.AddIndex(
            model_name="session",
            index=models.Index(fields=["created"], name="core_sessio_created_311896_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="session",
            unique_together={("access_token", "refresh_token")},
        ),
    ]
